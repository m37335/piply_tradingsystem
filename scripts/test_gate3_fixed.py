#!/usr/bin/env python3
"""
‰øÆÊ≠£„Åï„Çå„ÅüGATE 3Ë®≠ÂÆö„Çí„ÉÜ„Çπ„Éà„Åô„Çã„Çπ„ÇØ„É™„Éó„Éà
"""

import sys
import os
sys.path.append('/app')

import asyncio
import pandas as pd
from modules.llm_analysis.core.three_gate_engine import ThreeGateEngine
from modules.llm_analysis.core.technical_calculator import TechnicalIndicatorCalculator
from modules.data_persistence.config.settings import DatabaseConfig
from modules.data_persistence.core.database import DatabaseConnectionManager

async def test_gate3_fixed():
    """‰øÆÊ≠£„Åï„Çå„ÅüGATE 3Ë®≠ÂÆö„Çí„ÉÜ„Çπ„Éà"""
    
    print("üîç ‰øÆÊ≠£„Åï„Çå„ÅüGATE 3Ë®≠ÂÆö„ÉÜ„Çπ„ÉàÈñãÂßã")
    
    # „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö
    config = DatabaseConfig()
    db_manager = DatabaseConnectionManager(config.connection_string)
    await db_manager.initialize()
    
    # ÊúÄÊñ∞„ÅÆ‰æ°Ê†º„Éá„Éº„Çø„ÇíÂèñÂæó
    print("üìä ÊúÄÊñ∞‰æ°Ê†º„Éá„Éº„ÇøÂèñÂæó‰∏≠...")
    query = """
    SELECT symbol, timeframe, timestamp, open, high, low, close, volume
    FROM price_data 
    WHERE symbol = 'USDJPY=X' 
    ORDER BY timestamp DESC 
    LIMIT 1000
    """
    
    result = await db_manager.execute_query(query)
    if not result:
        print("‚ùå ‰æ°Ê†º„Éá„Éº„Çø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì")
        return
    
    # „Éá„Éº„Çø„ÇíDataFrame„Å´Â§âÊèõ
    df = pd.DataFrame(result, columns=['symbol', 'timeframe', 'timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    df = df.sort_values('timestamp')
    
    # ÊôÇÈñìË∂≥Âà•„Å´„Éá„Éº„Çø„ÇíÂàÜÈõ¢
    timeframes = ['1d', '4h', '1h', '5m']
    timeframe_data = {}
    
    for tf in timeframes:
        tf_data = df[df['timeframe'] == tf].copy()
        if len(tf_data) > 0:
            timeframe_data[tf] = tf_data
            print(f"‚úÖ {tf}Ë∂≥: {len(tf_data)}‰ª∂„ÅÆ„Éá„Éº„Çø")
        else:
            print(f"‚ùå {tf}Ë∂≥: „Éá„Éº„Çø„Å™„Åó")
    
    # „ÉÜ„ÇØ„Éã„Ç´„É´ÊåáÊ®ôË®àÁÆó
    print("\nüìä „ÉÜ„ÇØ„Éã„Ç´„É´ÊåáÊ®ôË®àÁÆó‰∏≠...")
    calculator = TechnicalIndicatorCalculator()
    
    all_indicators = {}
    for tf, data in timeframe_data.items():
        print(f"‚è∞ {tf}Ë∂≥„ÅÆÊåáÊ®ôË®àÁÆó‰∏≠...")
        indicators = calculator.calculate_all_indicators({tf: data})
        all_indicators.update(indicators)
        print(f"‚úÖ {tf}Ë∂≥: {len(indicators)}ÂÄã„ÅÆÊåáÊ®ô„ÇíË®àÁÆó")
    
    # ThreeGateEngine„ÅßGATE 3„Çí„ÉÜ„Çπ„Éà
    print("\nüö™ GATE 3„ÉÜ„Çπ„ÉàÈñãÂßã...")
    engine = ThreeGateEngine()
    
    # „ÉÜ„Çπ„ÉàÁî®„ÅÆ„Éá„Éº„ÇøÔºàÂÆüÈöõ„ÅÆ„Éá„Éº„Çø„Çí‰ΩøÁî®Ôºâ
    test_data = {}
    for tf, data in timeframe_data.items():
        if tf in all_indicators:
            # DataFrame„Åã„ÇâÊúÄÊñ∞„ÅÆÂÄ§„ÇíÊäΩÂá∫
            latest_data = {}
            df_with_indicators = all_indicators[tf]
            
            # Âü∫Êú¨‰æ°Ê†º„Éá„Éº„Çø
            latest_data['open'] = data['open'].iloc[-1]
            latest_data['high'] = data['high'].iloc[-1]
            latest_data['low'] = data['low'].iloc[-1]
            latest_data['close'] = data['close'].iloc[-1]
            latest_data['volume'] = data['volume'].iloc[-1]
            
            # „ÉÜ„ÇØ„Éã„Ç´„É´ÊåáÊ®ô„Éá„Éº„Çø
            for col in df_with_indicators.columns:
                if col not in ['symbol', 'timeframe', 'timestamp']:
                    latest_data[col] = df_with_indicators[col].iloc[-1]
            
            test_data.update(latest_data)
    
    print(f"üìä „ÉÜ„Çπ„Éà„Éá„Éº„Çø: {len(test_data)}ÂÄã„ÅÆÊåáÊ®ô")
    
    # ‰øÆÊ≠£„Åï„Çå„ÅüGATE 3„ÅÆÊù°‰ª∂„Çí„ÉÜ„Çπ„Éà
    print("\nüîç ‰øÆÊ≠£„Åï„Çå„ÅüGATE 3Êù°‰ª∂„ÅÆ„ÉÜ„Çπ„Éà...")
    
    # price_action_reversal„Éë„Çø„Éº„É≥„ÅÆÊù°‰ª∂„Çí„ÉÜ„Çπ„Éà
    print("üìä price_action_reversal „Éë„Çø„Éº„É≥„ÅÆÊù°‰ª∂„ÉÜ„Çπ„Éà:")
    
    # uptrend_pinbarÊù°‰ª∂
    print("  üî∏ uptrend_pinbar:")
    
    # long_lower_shadowÊù°‰ª∂
    candle_lower_shadow = test_data.get('candle_lower_shadow', None)
    candle_body = test_data.get('candle_body', None)
    if candle_lower_shadow is not None and candle_body is not None:
        long_lower_shadow = candle_lower_shadow > (candle_body * 2.0)
        print(f"    - long_lower_shadow: {candle_lower_shadow} > {candle_body * 2.0} = {long_lower_shadow}")
    else:
        print(f"    - long_lower_shadow: „Éá„Éº„Çø‰∏çË∂≥ (candle_lower_shadow={candle_lower_shadow}, candle_body={candle_body})")
    
    # small_upper_shadowÊù°‰ª∂
    candle_upper_shadow = test_data.get('candle_upper_shadow', None)
    if candle_upper_shadow is not None and candle_body is not None:
        small_upper_shadow = candle_upper_shadow < (candle_body * 0.5)
        print(f"    - small_upper_shadow: {candle_upper_shadow} < {candle_body * 0.5} = {small_upper_shadow}")
    else:
        print(f"    - small_upper_shadow: „Éá„Éº„Çø‰∏çË∂≥ (candle_upper_shadow={candle_upper_shadow}, candle_body={candle_body})")
    
    # near_supportÊù°‰ª∂Ôºà‰øÆÊ≠£ÂæåÔºâ
    close = test_data.get('close', None)
    ema_21 = test_data.get('EMA_21', None)
    if close is not None and ema_21 is not None:
        near_support = abs(close - ema_21) / ema_21 < 0.003
        print(f"    - near_support: |{close} - {ema_21}| / {ema_21} < 0.003 = {near_support}")
    else:
        print(f"    - near_support: „Éá„Éº„Çø‰∏çË∂≥ (close={close}, EMA_21={ema_21})")
    
    # ThreeGateEngine„ÅßÂÆüÈöõ„ÅÆË©ï‰æ°„Çí„ÉÜ„Çπ„Éà
    print("\nüö™ ThreeGateEngine„Åß„ÅÆÂÆüÈöõ„ÅÆË©ï‰æ°„ÉÜ„Çπ„Éà...")
    
    try:
        result = await engine.evaluate("USDJPY=X", test_data)
        print(f"‚úÖ Ë©ï‰æ°ÁµêÊûú: {result}")
        if result:
            print(f"  - GATE 1: {'ÂêàÊ†º' if result.gate1_passed else '‰∏çÂêàÊ†º'}")
            print(f"  - GATE 2: {'ÂêàÊ†º' if result.gate2_passed else '‰∏çÂêàÊ†º'}")
            print(f"  - GATE 3: {'ÂêàÊ†º' if result.gate3_passed else '‰∏çÂêàÊ†º'}")
            print(f"  - „Ç∑„Ç∞„Éä„É´: {result.signal_type if result.signal_type else '„Å™„Åó'}")
            
            if result.gate3_passed:
                print("üéâ GATE 3„ÅåÂêàÊ†º„Åó„Åæ„Åó„ÅüÔºÅ")
            else:
                print("‚ùå GATE 3„Åå‰∏çÂêàÊ†º„Åß„Åô")
        else:
            print("‚ùå Ë©ï‰æ°ÁµêÊûú„ÅåNone„Åß„Åô")
    except Exception as e:
        print(f"‚ùå Ë©ï‰æ°„Ç®„É©„Éº: {e}")
        import traceback
        traceback.print_exc()
    
    await db_manager.close()

if __name__ == "__main__":
    asyncio.run(test_gate3_fixed())
